
// One way of doing

// node {
//      def commit_id
//      stage('clone repo') {
//         checkout scm
//         sh "git rev-parse --short HEAD > .git/commit-id"                        
//         commit_id = readFile('.git/commit-id').trim()
//      }

//      stage('install libs') {
//           sh 'pip3 install -r requirements.txt'
//      }

//      stage('tests') {
//           sh 'pytest-3 -v ./tests/test_main.py --disable-warnings'
//      }

//      stage('docker build/push') {
//         docker.withRegistry('https://index.docker.io/v2/', 'dockerhub') {
//         def app = docker.build("sunlnx/demo-fastapi:${commit_id}", '.').push()
//         }
//      }
// }

pipeline {
    agent any

     environment {
        BUILD_VERSION = sh (script: 'date +"%Y-%m-%d-${BUILD_ID}"', returnStdout: true).trim()
        IMAGE_TAG = "$BUILD_VERSION"
        REGISTRY = "https://index.docker.io/v2/"
        DOCKERHUB_REPO = "sunlnx/demo-fastapi"
    }

    stages {
          stage('clone repo') {
            steps {
                checkout scm
            }
        }

          stage('install libs') {
               steps {
                    sh 'pip3 install -r requirements.txt'
               }        
          }

          stage('tests') {
               steps {
                    sh 'pytest-3 -v ./tests/test_main.py --disable-warnings'
               }
          }
    }
}