
// One way of doing

// node {
//      def commit_id
//      stage('clone repo') {
//         checkout scm
//         sh "git rev-parse --short HEAD > .git/commit-id"                        
//         commit_id = readFile('.git/commit-id').trim()
//      }

//      stage('install libs') {
//           sh 'pip3 install -r requirements.txt'
//      }

//      stage('tests') {
//           sh 'pytest-3 -v ./tests/test_main.py --disable-warnings'
//      }

//      stage('docker build/push') {
//         docker.withRegistry('https://index.docker.io/v2/', 'dockerhub') {
//         def app = docker.build("sunlnx/demo-fastapi:${commit_id}", '.').push()
//         }
//      }
// }

pipeline {
    agent any

     environment {
        DOCKERHUB_REPO = "sunlnx/demo-fastapi"
        COMMIT_ID = sh(returnStdout: true, script: 'git rev-parse --short HEAD')
    }

    stages {
          stage('clone repo') {
            steps {
                checkout scm
                sh 'git rev-parse --short HEAD > .git/commit-id'
                sh 'commit_id=cat .git/commit-id | xargs'
            }
        }

          stage('install libs') {
               steps {
                    sh 'pip3 install -r requirements.txt'
               }        
          }

          stage('tests') {
               steps {
                    sh 'pytest-3 -v ./tests/test_main.py --disable-warnings'
               }
          }

          stage('build-push image') {
               steps {
                    withDockerRegistry(credentialsId: 'dockerhub', url: 'https://index.docker.io/v2/') {
                        sh 'docker build -f Dockerfile -t $DOCKERHUB_REPO:$COMMIT_ID .'
                        sh 'docker push $DOCKERHUB_REPO:$COMMIT_ID'
                    }
               }

          }
    }
}